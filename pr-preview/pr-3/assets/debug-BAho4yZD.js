import{f as r,j as e}from"./index-xNsX7Ar1.js";const s={description:"Debug API for inspecting Ethereum state and traces.",title:"debug"};function n(t){const d={a:"a",blockquote:"blockquote",code:"code",div:"div",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...r(),...t.components};return e.jsxs(e.Fragment,{children:[e.jsx(d.header,{children:e.jsxs(d.h1,{id:"debug-namespace",children:[e.jsx(d.code,{children:"debug"})," Namespace",e.jsx(d.a,{"aria-hidden":"true",tabIndex:"-1",href:"#debug-namespace",children:e.jsx(d.div,{"data-autolink-icon":!0})})]})}),`
`,e.jsxs(d.p,{children:["The ",e.jsx(d.code,{children:"debug"})," API provides several methods to inspect the Ethereum state, including Geth-style traces."]}),`
`,e.jsxs(d.h2,{id:"debug_getrawheader",children:[e.jsx(d.code,{children:"debug_getRawHeader"}),e.jsx(d.a,{"aria-hidden":"true",tabIndex:"-1",href:"#debug_getrawheader",children:e.jsx(d.div,{"data-autolink-icon":!0})})]}),`
`,e.jsx(d.p,{children:"Returns an RLP-encoded header."}),`
`,e.jsxs(d.table,{children:[e.jsx(d.thead,{children:e.jsxs(d.tr,{children:[e.jsx(d.th,{children:"Client"}),e.jsx(d.th,{children:"Method invocation"})]})}),e.jsx(d.tbody,{children:e.jsxs(d.tr,{children:[e.jsx(d.td,{children:"RPC"}),e.jsx(d.td,{children:e.jsx(d.code,{children:'{"method": "debug_getRawHeader", "params": [block]}'})})]})})]}),`
`,e.jsxs(d.h2,{id:"debug_getrawblock",children:[e.jsx(d.code,{children:"debug_getRawBlock"}),e.jsx(d.a,{"aria-hidden":"true",tabIndex:"-1",href:"#debug_getrawblock",children:e.jsx(d.div,{"data-autolink-icon":!0})})]}),`
`,e.jsx(d.p,{children:"Retrieves and returns the RLP encoded block by number, hash or tag."}),`
`,e.jsxs(d.table,{children:[e.jsx(d.thead,{children:e.jsxs(d.tr,{children:[e.jsx(d.th,{children:"Client"}),e.jsx(d.th,{children:"Method invocation"})]})}),e.jsx(d.tbody,{children:e.jsxs(d.tr,{children:[e.jsx(d.td,{children:"RPC"}),e.jsx(d.td,{children:e.jsx(d.code,{children:'{"method": "debug_getRawBlock", "params": [block]}'})})]})})]}),`
`,e.jsxs(d.h2,{id:"debug_getrawtransaction",children:[e.jsx(d.code,{children:"debug_getRawTransaction"}),e.jsx(d.a,{"aria-hidden":"true",tabIndex:"-1",href:"#debug_getrawtransaction",children:e.jsx(d.div,{"data-autolink-icon":!0})})]}),`
`,e.jsx(d.p,{children:"Returns an EIP-2718 binary-encoded transaction."}),`
`,e.jsxs(d.table,{children:[e.jsx(d.thead,{children:e.jsxs(d.tr,{children:[e.jsx(d.th,{children:"Client"}),e.jsx(d.th,{children:"Method invocation"})]})}),e.jsx(d.tbody,{children:e.jsxs(d.tr,{children:[e.jsx(d.td,{children:"RPC"}),e.jsx(d.td,{children:e.jsx(d.code,{children:'{"method": "debug_getRawTransaction", "params": [tx_hash]}'})})]})})]}),`
`,e.jsxs(d.h2,{id:"debug_getrawreceipts",children:[e.jsx(d.code,{children:"debug_getRawReceipts"}),e.jsx(d.a,{"aria-hidden":"true",tabIndex:"-1",href:"#debug_getrawreceipts",children:e.jsx(d.div,{"data-autolink-icon":!0})})]}),`
`,e.jsx(d.p,{children:"Returns an array of EIP-2718 binary-encoded receipts."}),`
`,e.jsxs(d.table,{children:[e.jsx(d.thead,{children:e.jsxs(d.tr,{children:[e.jsx(d.th,{children:"Client"}),e.jsx(d.th,{children:"Method invocation"})]})}),e.jsx(d.tbody,{children:e.jsxs(d.tr,{children:[e.jsx(d.td,{children:"RPC"}),e.jsx(d.td,{children:e.jsx(d.code,{children:'{"method": "debug_getRawReceipts", "params": [block]}'})})]})})]}),`
`,e.jsxs(d.h2,{id:"debug_getbadblocks",children:[e.jsx(d.code,{children:"debug_getBadBlocks"}),e.jsx(d.a,{"aria-hidden":"true",tabIndex:"-1",href:"#debug_getbadblocks",children:e.jsx(d.div,{"data-autolink-icon":!0})})]}),`
`,e.jsx(d.p,{children:"Returns an array of recent bad blocks that the client has seen on the network."}),`
`,e.jsxs(d.table,{children:[e.jsx(d.thead,{children:e.jsxs(d.tr,{children:[e.jsx(d.th,{children:"Client"}),e.jsx(d.th,{children:"Method invocation"})]})}),e.jsx(d.tbody,{children:e.jsxs(d.tr,{children:[e.jsx(d.td,{children:"RPC"}),e.jsx(d.td,{children:e.jsx(d.code,{children:'{"method": "debug_getBadBlocks", "params": []}'})})]})})]}),`
`,e.jsxs(d.h2,{id:"debug_tracechain",children:[e.jsx(d.code,{children:"debug_traceChain"}),e.jsx(d.a,{"aria-hidden":"true",tabIndex:"-1",href:"#debug_tracechain",children:e.jsx(d.div,{"data-autolink-icon":!0})})]}),`
`,e.jsx(d.p,{children:"Returns the structured logs created during the execution of EVM between two blocks (excluding start) as a JSON object."}),`
`,e.jsxs(d.table,{children:[e.jsx(d.thead,{children:e.jsxs(d.tr,{children:[e.jsx(d.th,{children:"Client"}),e.jsx(d.th,{children:"Method invocation"})]})}),e.jsx(d.tbody,{children:e.jsxs(d.tr,{children:[e.jsx(d.td,{children:"RPC"}),e.jsx(d.td,{children:e.jsx(d.code,{children:'{"method": "debug_traceChain", "params": [start_block, end_block]}'})})]})})]}),`
`,e.jsxs(d.h2,{id:"debug_traceblock",children:[e.jsx(d.code,{children:"debug_traceBlock"}),e.jsx(d.a,{"aria-hidden":"true",tabIndex:"-1",href:"#debug_traceblock",children:e.jsx(d.div,{"data-autolink-icon":!0})})]}),`
`,e.jsxs(d.p,{children:["The ",e.jsx(d.code,{children:"debug_traceBlock"})," method will return a full stack trace of all invoked opcodes of all transaction that were included in this block."]}),`
`,e.jsx(d.p,{children:"This expects an RLP-encoded block."}),`
`,e.jsxs(d.blockquote,{children:[`
`,e.jsx(d.strong,{children:"Note"}),`
`,e.jsx(d.p,{children:"The parent of this block must be present, or it will fail."}),`
`]}),`
`,e.jsxs(d.table,{children:[e.jsx(d.thead,{children:e.jsxs(d.tr,{children:[e.jsx(d.th,{children:"Client"}),e.jsx(d.th,{children:"Method invocation"})]})}),e.jsx(d.tbody,{children:e.jsxs(d.tr,{children:[e.jsx(d.td,{children:"RPC"}),e.jsx(d.td,{children:e.jsx(d.code,{children:'{"method": "debug_traceBlock", "params": [rlp, opts]}'})})]})})]}),`
`,e.jsxs(d.h2,{id:"debug_traceblockbyhash",children:[e.jsx(d.code,{children:"debug_traceBlockByHash"}),e.jsx(d.a,{"aria-hidden":"true",tabIndex:"-1",href:"#debug_traceblockbyhash",children:e.jsx(d.div,{"data-autolink-icon":!0})})]}),`
`,e.jsxs(d.p,{children:["Similar to ",e.jsx(d.a,{href:"#debug_traceblock",children:e.jsx(d.code,{children:"debug_traceBlock"})}),", ",e.jsx(d.code,{children:"debug_traceBlockByHash"})," accepts a block hash and will replay the block that is already present in the database."]}),`
`,e.jsxs(d.table,{children:[e.jsx(d.thead,{children:e.jsxs(d.tr,{children:[e.jsx(d.th,{children:"Client"}),e.jsx(d.th,{children:"Method invocation"})]})}),e.jsx(d.tbody,{children:e.jsxs(d.tr,{children:[e.jsx(d.td,{children:"RPC"}),e.jsx(d.td,{children:e.jsx(d.code,{children:'{"method": "debug_traceBlockByHash", "params": [block_hash, opts]}'})})]})})]}),`
`,e.jsxs(d.h2,{id:"debug_traceblockbynumber",children:[e.jsx(d.code,{children:"debug_traceBlockByNumber"}),e.jsx(d.a,{"aria-hidden":"true",tabIndex:"-1",href:"#debug_traceblockbynumber",children:e.jsx(d.div,{"data-autolink-icon":!0})})]}),`
`,e.jsxs(d.p,{children:["Similar to ",e.jsx(d.a,{href:"#debug_traceblockbyhash",children:e.jsx(d.code,{children:"debug_traceBlockByHash"})}),", ",e.jsx(d.code,{children:"debug_traceBlockByNumber"})," accepts a block number and will replay the block that is already present in the database."]}),`
`,e.jsxs(d.table,{children:[e.jsx(d.thead,{children:e.jsxs(d.tr,{children:[e.jsx(d.th,{children:"Client"}),e.jsx(d.th,{children:"Method invocation"})]})}),e.jsx(d.tbody,{children:e.jsxs(d.tr,{children:[e.jsx(d.td,{children:"RPC"}),e.jsx(d.td,{children:e.jsx(d.code,{children:'{"method": "debug_traceBlockByNumber", "params": [block_number, opts]}'})})]})})]}),`
`,e.jsxs(d.h2,{id:"debug_tracetransaction",children:[e.jsx(d.code,{children:"debug_traceTransaction"}),e.jsx(d.a,{"aria-hidden":"true",tabIndex:"-1",href:"#debug_tracetransaction",children:e.jsx(d.div,{"data-autolink-icon":!0})})]}),`
`,e.jsxs(d.p,{children:["The ",e.jsx(d.code,{children:"debug_traceTransaction"})," debugging method will attempt to run the transaction in the exact same manner as it was executed on the network. It will replay any transaction that may have been executed prior to this one before it will finally attempt to execute the transaction that corresponds to the given hash."]}),`
`,e.jsxs(d.table,{children:[e.jsx(d.thead,{children:e.jsxs(d.tr,{children:[e.jsx(d.th,{children:"Client"}),e.jsx(d.th,{children:"Method invocation"})]})}),e.jsx(d.tbody,{children:e.jsxs(d.tr,{children:[e.jsx(d.td,{children:"RPC"}),e.jsx(d.td,{children:e.jsx(d.code,{children:'{"method": "debug_traceTransaction", "params": [tx_hash, opts]}'})})]})})]}),`
`,e.jsxs(d.h2,{id:"debug_tracecall",children:[e.jsx(d.code,{children:"debug_traceCall"}),e.jsx(d.a,{"aria-hidden":"true",tabIndex:"-1",href:"#debug_tracecall",children:e.jsx(d.div,{"data-autolink-icon":!0})})]}),`
`,e.jsxs(d.p,{children:["The ",e.jsx(d.code,{children:"debug_traceCall"})," method lets you run an ",e.jsx(d.code,{children:"eth_call"})," within the context of the given block execution using the final state of parent block as the base."]}),`
`,e.jsxs(d.p,{children:["The first argument (just as in ",e.jsx(d.code,{children:"eth_call"}),") is a transaction request."]}),`
`,e.jsx(d.p,{children:"The block can optionally be specified either by hash or by number as the second argument."}),`
`,e.jsxs(d.table,{children:[e.jsx(d.thead,{children:e.jsxs(d.tr,{children:[e.jsx(d.th,{children:"Client"}),e.jsx(d.th,{children:"Method invocation"})]})}),e.jsx(d.tbody,{children:e.jsxs(d.tr,{children:[e.jsx(d.td,{children:"RPC"}),e.jsx(d.td,{children:e.jsx(d.code,{children:'{"method": "debug_traceCall", "params": [call, block_number, opts]}'})})]})})]})]})}function i(t={}){const{wrapper:d}={...r(),...t.components};return d?e.jsx(d,{...t,children:e.jsx(n,{...t})}):n(t)}export{i as default,s as frontmatter};
